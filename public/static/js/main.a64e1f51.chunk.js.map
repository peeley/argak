{"version":3,"sources":["Palette.js","Tool.js","PenTool.js","RectTool.js","ToolController.js","VersionController.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Palette","props","handleColorChange","bind","handleStrokeWidthChange","componentDidMount","state","strokeWidth","color","this","palette","Pickr","create","el","theme","swatches","components","preview","opacity","hue","interaction","input","clear","save","on","instance","hide","updateStrokeWidth","newColor","setState","toRGBA","toString","updateColor","event","target","value","preventDefault","className","type","min","max","onChange","React","Component","Tool","strokeType","mouseDown","currentStroke","indicator","coords","setColor","getColor","setStrokeWidth","getStrokeWidth","setOffsets","resetStroke","drawSurface","rect","current","getBoundingClientRect","topOffset","top","leftOffset","left","width","context","PenTool","toolName","handleEvent","joinType","xCoord","clientX","yCoord","clientY","beginPath","lineCap","lineJoin","strokeStyle","moveTo","finishedStroke","lineWidth","lineTo","push","indicatorStroke","stroke","startCoords","slice","coord","restore","RectTool","startX","startY","fillStyle","height","fillRect","x","y","ToolController","toolSet","selectedTool","handleToolSelect","handleChange","selectNewTool","selectedName","prevProps","surface","id","checked","htmlFor","VersionController","versionHistory","currentVersion","undo","redo","redrawCanvas","wipeHistory","item","length","getContext","versionCounter","canvas","clearRect","redoStroke","console","log","splice","Canvas","handleInput","versionController","clearCanvas","tool","createRef","document","addEventListener","ctrlKey","key","newItem","onClick","onMouseDown","onMouseMove","onMouseLeave","onMouseUp","window","innerHeight","innerWidth","ref","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a64e1f51.chunk.js","sourcesContent":["import React from 'react';\nimport '@simonwep/pickr/dist/themes/nano.min.css';   // 'classic' theme\nimport Pickr from '@simonwep/pickr';\n\nexport class Palette extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleStrokeWidthChange = this.handleStrokeWidthChange.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.state = {\n            strokeWidth: 3,\n            color: \"#42445A\"\n        }\n\t}\n\tcomponentDidMount(){\n        this.palette = Pickr.create({\n            el: '.colorPalette',\n\t\t\ttheme: 'nano', // or 'monolith', or 'nano'\n\n\t\t\tswatches: [\n\t\t\t\t'rgba(244, 67, 54, 1)',\n\t\t\t\t'rgba(233, 30, 99, 0.95)',\n\t\t\t\t'rgba(156, 39, 176, 0.9)',\n\t\t\t\t'rgba(103, 58, 183, 0.85)',\n\t\t\t\t'rgba(63, 81, 181, 0.8)',\n\t\t\t\t'rgba(33, 150, 243, 0.75)',\n\t\t\t\t'rgba(3, 169, 244, 0.7)',\n\t\t\t\t'rgba(0, 188, 212, 0.7)',\n\t\t\t\t'rgba(0, 150, 136, 0.75)',\n\t\t\t\t'rgba(76, 175, 80, 0.8)',\n\t\t\t\t'rgba(139, 195, 74, 0.85)',\n\t\t\t\t'rgba(205, 220, 57, 0.9)',\n\t\t\t\t'rgba(255, 235, 59, 0.95)',\n\t\t\t\t'rgba(255, 193, 7, 1)'\n\t\t\t],\n\n\t\t\tcomponents: {\n\n\t\t\t\t// Main components\n\t\t\t\tpreview: true,\n\t\t\t\topacity: true,\n\t\t\t\thue: true,\n\n\t\t\t\t// Input / output Options\n\t\t\t\tinteraction: {\n\t\t\t\t\tinput: true,\n\t\t\t\t\tclear: true,\n\t\t\t\t\tsave: true\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.palette.on('save', (color, instance) => {\n            this.palette.hide();\n            this.handleColorChange(color, instance);\n        });\n        this.props.updateStrokeWidth(this.state.strokeWidth);\n    }\n    handleColorChange(newColor, instance){\n        this.setState({\n            color: newColor.toRGBA().toString()\n        });\n        this.props.updateColor(this.state.color);\n    }\n    handleStrokeWidthChange(event){\n        this.setState({\n            strokeWidth: event.target.value\n        });\n        this.props.updateStrokeWidth(this.state.strokeWidth);\n        event.preventDefault();\n    }\n    render(){\n        return (\n            <div className=\"row\">\n                <div className=\"border border-dark\">\n                    <div className=\"colorPalette\"/>\n                </div>\n                <div className=\"strokeWidthSlider pt-2 pl-3 pr-5\">\n                    <input type=\"range\" min=\"1\" max=\"30\"\n                        className=\"slider\"\n                        value={this.state.strokeWidth}\n                        onChange={this.handleStrokeWidthChange}     \n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","\nexport class Tool {\n    constructor(strokeType){\n        this.strokeType = strokeType;\n        this.mouseDown = false;\n        this.color = \"#42445A\";\n        this.currentStroke = {\n            type: this.strokeType,\n            indicator: false,\n            color: this.color,\n            strokeWidth: 1,\n            coords: []\n        }\n        this.setColor = this.setColor.bind(this);\n        this.getColor = this.getColor.bind(this);\n        this.setStrokeWidth = this.setStrokeWidth.bind(this);\n        this.getStrokeWidth = this.getStrokeWidth.bind(this);\n        this.setOffsets = this.setOffsets.bind(this);\n        this.resetStroke = this.resetStroke.bind(this);\n    }\n    resetStroke(){\n        this.currentStroke = {\n            type: this.strokeType,\n            color: this.getColor(),\n            strokeWidth: this.getStrokeWidth(),\n        }\n    }\n    setOffsets(drawSurface){\n        let rect = drawSurface.current.getBoundingClientRect();\n        this.topOffset = rect.top;\n        this.leftOffset = rect.left;\n    }\n    setColor(color){\n        this.color = color;\n        this.currentStroke.color = this.color;\n    }\n    getColor(){\n        return this.color;\n    }\n    setStrokeWidth(width){\n        this.strokeWidth = width;\n        this.currentStroke.strokeWidth = this.strokeWidth;\n    }\n    getStrokeWidth(){\n        return this.strokeWidth;\n    }\n    handleEvent(event, context){}\n}\n","import { Tool } from './Tool.js';\n\nexport class PenTool extends Tool {\n    constructor(){\n        super('pen');\n        this.toolName = 'pen';\n        this.handleEvent = this.handleEvent.bind(this);\n        this.strokeWidth = 3;\n        this.joinType = 'round';\n    }\n    handleEvent(event, context){\n        const xCoord = event.clientX - this.leftOffset;\n        const yCoord = event.clientY - this.topOffset;\n        if(event.type === \"mousedown\"){\n            this.mouseDown = true;\n            context.save();\n            context.beginPath();\n            context.lineCap = 'round';\n            context.lineJoin = this.joinType;\n            context.strokeStyle = this.color;\n            context.moveTo(xCoord, yCoord);\n            this.currentStroke.coords = [[xCoord, yCoord]];\n        }\n        else if((event.type === \"mouseup\" || event.type === \"mouseleave\") && this.mouseDown){\n            this.mouseDown = false;\n            let finishedStroke = this.currentStroke;\n            finishedStroke.indicator = false;\n            this.resetStroke();\n            return finishedStroke;\n        }\n        else if(this.mouseDown && event.type === \"mousemove\"){\n            context.lineWidth = this.strokeWidth;\n            context.lineTo(xCoord, yCoord);\n            this.currentStroke.coords.push([xCoord, yCoord]);\n            let indicatorStroke = this.currentStroke;\n            indicatorStroke.indicator = true;\n            return indicatorStroke;\n\n        }\n    }   \n    static redoStroke(stroke, context){\n        const color = stroke.color;\n        const width = stroke.strokeWidth;\n        const startCoords = stroke.coords[0];\n        context.save();\n        context.strokeStyle = color;\n        context.lineWidth = width;\n        context.beginPath();\n        context.moveTo(startCoords[0], startCoords[1]);\n        for(let coord of stroke.coords.slice(1)){\n            context.lineTo(coord[0], coord[1]);\n        }\n        context.stroke();\n        context.restore();\n    }\n}\n","import { Tool } from './Tool.js';\n\nexport class RectTool extends Tool {\n    constructor(){\n        super('rect');\n        this.toolName = 'rect';\n        this.startX = null;\n        this.startY = null;\n        this.mouseDown = false;\n    }\n    handleEvent(event, context){\n        if(event.type === \"mousedown\"){\n            context.beginPath();\n            this.mouseDown = true;\n            this.startX = event.clientX - this.leftOffset;\n            this.startY = event.clientY - this.topOffset;\n            this.currentStroke.coords = [this.startX, this.startY];\n        }\n        else if(event.type === \"mouseup\" || \n                (this.mouseDown && event.type === \"mousemove\")){\n            context.fillStyle = this.color;\n            const width = (event.clientX - this.leftOffset) - this.startX;\n            const height = (event.clientY - this.topOffset) - this.startY;\n            context.fillRect(this.startX, this.startY, width, height);\n            this.currentStroke.width = width;\n            this.currentStroke.height = height;\n            const finishedStroke = this.currentStroke;\n            if(event.type === \"mouseup\"){\n                finishedStroke.indicator = false;\n                this.resetStroke();\n                this.mouseDown = false;\n            }\n            else{\n                finishedStroke.indicator = true;\n            }\n            return finishedStroke;\n        }\n    }   \n    static redoStroke(stroke, context){\n        const color = stroke.color;\n        const [x, y] = stroke.coords;\n        const width = stroke.width;\n        const height = stroke.height;\n        context.save();\n        context.fillStyle = color;\n        context.fillRect(x, y, width, height);\n        context.restore();\n    }\n}\n","import React from 'react';\nimport { Palette } from './Palette.js';\nimport { PenTool } from './PenTool.js';\nimport { RectTool } from './RectTool.js';\n\nexport class ToolController extends React.Component{\n    /* TODO : update when static fields are widely compatible\n    static toolSet = {\n        'pen': new PenTool(),\n        'rect': new RectTool()\n    } */\n    constructor(props){\n        super(props);\n        this.toolSet = {\n            'pen': new PenTool(),\n            'rect': new RectTool()\n        }\n        this.selectedTool = this.toolSet['pen'];\n        this.props.handleToolSelect(this.selectedTool);\n        this.handleChange = this.handleChange.bind(this);\n        this.selectNewTool = this.selectNewTool.bind(this);\n        this.setStrokeWidth = this.setStrokeWidth.bind(this);\n        this.setColor = this.setColor.bind(this);\n        this.state = {\n            selectedName: \"pen\"\n        };\n    }\n    componentDidUpdate(prevProps){\n        if(this.props.surface.current){\n            for(let toolName in this.toolSet){\n                this.toolSet[toolName].setOffsets(this.props.surface);\n            }\n        }\n    }\n    handleChange(event){\n        let toolName = event.target.value;\n        this.setState({\n            selectedName: toolName\n        });\n        this.selectNewTool(toolName);\n    }\n    selectNewTool(toolName){\n        this.selectedTool = this.toolSet[toolName];\n        this.props.handleToolSelect(this.selectedTool);\n    }\n    setStrokeWidth(width){\n        this.selectedTool.setStrokeWidth(width);\n    }\n    setColor(color){\n        for(let toolName in this.toolSet){\n            this.toolSet[toolName].setColor(color);\n        }\n    }\n    render(){\n        return(\n            <div className=\"row controlBar\">\n                <Palette \n                    updateStrokeWidth={this.setStrokeWidth}\n                    updateColor={this.setColor}\n                />\n                <div className=\"border border-dark row toolList pt-2\">\n                    <div className=\"pr-3\">\n                        <input type=\"radio\" value=\"pen\" id=\"pen\" \n                            checked={this.state.selectedName === \"pen\"} \n                            onChange={this.handleChange} />\n                        <label htmlFor=\"pen\"> Pen </label>\n                    </div>\n                    <div className=\"pr-5\">\n                        <input type=\"radio\" value=\"rect\" id=\"rect\" \n                            checked={this.state.selectedName === \"rect\"} \n                            onChange={this.handleChange} />\n                        <label htmlFor=\"rect\"> Rect </label>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { PenTool } from './PenTool.js';\nimport { RectTool } from './RectTool.js';\n\nexport class VersionController {\n    constructor(){\n        this.versionHistory = [];\n        this.currentVersion = 0;\n        this.undo = this.undo.bind(this);\n        this.redo = this.redo.bind(this);\n        this.redrawCanvas = this.redrawCanvas.bind(this);\n        this.wipeHistory = this.wipeHistory.bind(this);\n    }\n    push(item){\n        if(this.currentVersion !== this.versionHistory.length){\n            this.versionHistory = this.versionHistory.slice(\n                                    0, this.currentVersion);\n        }\n        this.versionHistory.push(item);\n        this.currentVersion += 1;\n    }\n    undo(drawSurface){\n        if(this.currentVersion > 0){\n            this.currentVersion -= 1;\n            this.redrawCanvas(drawSurface);\n        }\n    }\n    redo(drawSurface){\n        if(this.currentVersion < this.versionHistory.length){\n            this.currentVersion += 1;\n            this.redrawCanvas(drawSurface);\n        }\n    }\n    wipeHistory(){\n        this.versionHistory = [];\n        this.currentVersion = 0;\n    }\n    redrawCanvas(drawSurface){\n        let context = drawSurface.current.getContext('2d')\n        let versionCounter = 1;\n        const width = context.canvas.width;\n        const height = context.canvas.height;\n        context.clearRect(0, 0, width, height);\n        while(versionCounter <= this.currentVersion){\n            let stroke = this.versionHistory[versionCounter-1];\n            switch(stroke.type){\n                case 'pen':\n                    PenTool.redoStroke(stroke, context);\n                    break;\n                case 'rect':\n                    RectTool.redoStroke(stroke, context);\n                    break\n                default:\n                    console.log('unknown stroke type');\n            }\n            if(stroke.indicator){\n                this.versionHistory.splice(versionCounter-1, 1);\n                this.currentVersion -= 1;\n            }\n            else{\n                versionCounter += 1;\n            }\n        }\n    }\n}\n","import React from 'react';\nimport './Canvas.css';\nimport { ToolController } from './ToolController.js';\nimport { VersionController } from './VersionController.js';\n\nclass Canvas extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n        this.handleToolSelect = this.handleToolSelect.bind(this);\n        this.versionController = new VersionController();\n        this.clearCanvas = this.clearCanvas.bind(this);\n        this.state = {\n            tool: null,\n            drawSurface: React.createRef(),\n        };\n    }\n    componentDidMount(){\n        document.addEventListener('keydown', (event) => {\n            if(event.ctrlKey){\n                switch(event.key){\n                    case 'z':\n                        this.versionController.undo(this.state.drawSurface);\n                        break;\n                    case 'y':\n                        this.versionController.redo(this.state.drawSurface);\n                        break;\n                    default:\n                }\n            }\n        });\n    }\n    handleToolSelect(tool){\n        this.setState({\n            tool: tool\n        });\n    }\n    handleInput(event){\n        let context = this.state.drawSurface.current.getContext('2d');\n        let newItem = this.state.tool.handleEvent(event, context);\n        if(newItem != null){\n            this.versionController.push(newItem);\n            this.clearCanvas();\n            this.versionController.redrawCanvas(this.state.drawSurface);\n        }\n        event.preventDefault();\n    }\n    clearCanvas(){\n        let context = this.state.drawSurface.current.getContext('2d');\n        const width = context.canvas.width;\n        const height = context.canvas.height;\n        context.clearRect(0, 0, width, height);\n    }\n    render(){\n        return(\n            <div className=\"container col px-5 Canvas\">\n                <div className=\"row pl-5\">\n                    <ToolController \n                        surface={this.state.drawSurface}\n                        handleToolSelect={this.handleToolSelect}\n                    />\n                    <div className=\"versionButtons pt-2 pl-5\">\n                        <button onClick={(event) => {\n                            this.versionController.undo(this.state.drawSurface)\n                        }}>\n                            Undo\n                        </button>\n                        <button onClick={ (event) => {\n                            this.versionController.redo(this.state.drawSurface)\n                        }}>Redo</button>\n                        <button onClick={ (event) => { \n                            this.clearCanvas();\n                            this.versionController.wipeHistory()\n                        }}>\n                            Clear\n                        </button>\n                    </div>\n                </div>\n                <canvas className=\"row\" id=\"drawSurface\" \n                    onMouseDown = {this.handleInput}\n                    onMouseMove = {this.handleInput}                    \n                    onMouseLeave = {this.handleInput}\n                    onMouseUp = {this.handleInput}\n                    height = { window.innerHeight * .9 }\n                    width = { window.innerWidth * .95 }\n                    ref={ this.state.drawSurface }\n                />\n            </div>\n        )\n    }\n}\n\nexport default Canvas;\n","import React from 'react';\nimport Canvas from './Canvas.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}